// Code generated by go-bindata.
// sources:
// static/css/hyde.css
// static/css/poole.css
// static/css/syntax.css
// static/templates/_footer.html
// static/templates/_header.html
// static/templates/confirmation.html
// static/templates/error.html
// static/templates/index.html
// static/templates/stats.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticCssHydeCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x56\x6d\x6f\xdb\x36\x10\xfe\x9e\x5f\x71\x48\x31\xf4\x05\xb6\x65\xbb\x76\x1a\xbb\xc0\xd0\x6c\x43\xbb\x01\x2b\x36\xb4\xd9\x87\x01\x01\xe4\x93\x44\x59\x44\x28\x51\x20\xa9\x24\x5e\xd1\xff\xbe\x23\xa9\x17\x2b\xb2\x67\x2f\x81\x2d\x8b\xbc\x3b\x3e\x77\xf7\xdc\x1d\x83\x37\x17\xf0\x06\x20\x0c\x61\xf0\x17\x86\x76\x2b\xb8\x83\xbb\xe7\x3b\x76\xcd\xee\xd9\xad\xbb\xd0\xe9\xda\x2f\xf7\xe3\x2e\x6c\x14\xbc\xbe\x13\x82\x10\x36\x77\x56\xcb\x5b\x0b\x5e\x86\x9b\xfa\x19\x6e\x9c\x25\x2f\xd6\xfe\x87\xb5\x68\xfd\x24\x53\x81\x97\x6a\x36\xc3\xbb\x60\x13\xda\x93\x3d\x80\x51\xe8\x9f\x61\x6d\x8c\xe4\x82\x30\xb0\x9f\x4d\x40\xab\xc1\x8f\xf6\x9d\xa4\xc0\xae\x85\x9d\xb5\xbe\x53\x47\x36\xac\x8a\x5d\xb7\x5b\xbf\x30\xcd\xb7\x05\x4b\x46\x10\x55\x5c\x98\x11\x60\x91\x80\x62\x82\xa1\x66\x09\x54\x45\xc2\x14\x7c\xfe\xed\x16\x04\x8f\x59\xa1\x19\x44\x3b\xf8\x90\x27\x72\x02\xbf\x33\x54\x05\xe4\x52\x31\x40\x63\x2d\x65\xc6\x94\x7a\x1d\x04\x5b\x6e\xb2\x2a\x9a\xc4\x32\x0f\x4a\x29\x05\x0b\xb2\x5d\xc2\x26\x24\x11\x5c\x5c\x5c\xf8\xec\xfc\x2c\x0b\xc3\x0a\xa3\x6b\x0c\x9f\x84\x8c\x50\xd0\xa9\x9a\xb9\x35\xf8\xca\x13\x16\xa1\x6a\x44\x91\x17\xcc\xbd\x7c\x61\x0f\x4c\x11\x08\x81\x3b\x59\xb9\x43\x6f\x33\x96\x33\xdd\x33\xfe\xdc\x9a\x5d\xfb\xab\x4c\xd0\x30\x30\x19\x83\x54\x92\x53\x68\xb8\x2c\x48\xc8\x3a\xbb\xf5\xf2\xa8\x4b\x16\x1b\x0d\x32\x75\x62\x25\x6e\x1b\xd0\x99\xc9\x05\x7c\xbb\x00\x52\x2d\xcc\x38\xc5\x9c\x8b\xdd\x1a\x2e\xff\xbc\x85\xaf\x58\xe8\xcb\x11\xfc\xca\xc4\x03\x33\x3c\xc6\x11\xdc\x28\x8e\x62\x04\x9a\x36\xc6\x9a\x29\x9e\xbe\xbf\xf8\x7e\xf1\x21\x67\x09\x47\x78\x95\xf3\x62\xfc\xc8\x13\x93\xad\x61\x71\xcd\xf2\xd7\xce\x68\x6b\xbd\xb6\xaf\xf9\x3f\x6c\x0d\xb3\xab\xf2\xe9\x3d\x2d\x7e\x3f\xac\xbe\x3c\xa1\x3e\x9f\x76\xea\x4d\x5c\xba\xa0\xda\xb7\x8f\x82\x3d\xf1\x48\x50\x42\xb1\xa0\xe8\x92\xb2\x82\x4c\x56\x9a\x17\x5b\xd0\x9c\x62\x55\x60\xce\x46\xc0\x0b\xa3\xa4\x27\xc5\x65\x2a\xa5\x61\xea\x12\x62\x9f\xbd\x09\x7c\x35\xa8\x7c\xc2\x28\x1b\x80\x91\x7c\x60\xcd\x26\x29\x12\x37\x22\x4e\x07\x58\x5d\x41\xd1\x57\xb4\xf0\xc0\x34\x18\xe9\x02\xac\x09\x0e\x3c\x12\x57\xe8\xcb\x92\xec\x81\xb3\xc7\x52\x92\xbd\x3a\xea\x13\xed\xf1\x3a\xe7\x0c\x7b\x32\x63\x14\xc4\xd4\x35\x10\x0f\xc9\x98\xf5\xae\xc4\x24\x21\xbc\xe4\xae\x62\x39\xcc\xe8\xcb\xae\xc6\x52\x48\xb5\x06\xb5\x8d\xf0\xd5\x7c\xb9\x1c\x35\x9f\xc9\xf2\xb5\xdd\x8e\x30\xbe\xdf\x2a\x4b\x82\x71\x2d\xf9\x62\x3e\xb5\xff\x27\x33\xd5\x43\x44\xa7\x4b\x8a\x13\xd1\x68\x0d\x29\x7f\x62\xc9\x7b\xb7\x68\x64\xb9\x86\xa9\xff\x2d\x58\x6a\xda\x97\x48\x1a\x23\xf3\xf6\xb5\x36\x3e\xbb\xae\x41\xf7\x5d\xb4\x9a\x6d\xfa\x82\x36\x75\x54\x84\xc5\xbd\xb6\xd1\x69\xa1\xa0\x03\xd3\x38\x92\xa6\x8e\x6f\x56\xe5\x26\xb2\x39\xd1\x44\x69\x82\xb8\xaf\x32\x46\xb7\x93\xcd\x86\x9a\x00\x39\xaa\x2d\xb9\xde\x79\xd1\xa7\xfc\x4d\xa4\xb8\x80\x8f\x68\x52\x8c\x19\x11\xbf\x66\x78\x8f\x7a\x6f\x27\xf3\xa5\x73\xaa\x0f\xbd\xc0\x87\x1e\x0a\xfb\xfe\xad\xcb\xe1\x78\x2f\x58\x82\x6b\x32\x66\x76\x82\xac\x15\xb2\x60\xd6\xd4\xbe\xde\x98\xe8\x99\x3b\xe5\x84\xeb\x92\x7a\xc1\x1a\x22\x21\xe3\x7b\x2b\x87\x03\xc1\x75\x46\xac\x53\xa3\x43\x3b\xa9\x8c\x2b\xdd\xf1\x2b\x61\xb1\x54\xe8\x53\xea\x1a\x1f\x85\xfb\xf0\xe1\x13\xa4\xb0\x12\xd9\xdb\xa6\xf0\xc8\xf8\x36\x23\xfc\x91\x14\x49\xeb\x39\x75\x84\xfb\x1d\xe8\x5e\xd9\xdd\x24\x89\x63\xff\xa6\x31\xa9\x9d\xd4\x06\x62\x81\xba\x57\x1b\xb4\xf9\x52\xbb\x72\x72\xed\xcf\x6e\x61\x4a\x4c\x03\x6e\xac\x8c\x35\x56\xd7\x5a\xab\xe6\x39\xd6\x74\xb0\x86\x22\x54\x89\x06\xa9\xd2\x49\xce\x96\x62\x55\xd6\x05\x76\x16\xd7\x6b\x7c\x03\xca\x63\xa4\xa5\xa8\x0c\xf3\xdc\x55\xde\xfb\xb6\x04\x3b\xba\x77\x2b\x3e\xc1\x9d\x4c\xd3\x9a\x7a\x1d\xde\x85\xc8\xd6\x80\xf3\xa0\xf5\xaf\xf5\x88\xfa\x92\x6f\x33\xae\x45\x2b\x59\xda\xc0\x64\xd4\xea\x33\x0a\xbc\xef\x26\x5a\xe6\xac\xe1\x71\x5a\x59\x83\x6e\x19\x61\xbe\xfc\xc1\xfa\x49\xb1\x6f\x9c\xdb\x34\xad\xa6\x69\x5a\xfb\x84\x74\x35\xb0\x87\xb7\x59\xef\x7b\xf6\xfd\x54\x1c\xf7\x4d\xdb\xfa\x7a\x6a\x64\xde\x76\xa5\x5f\xa3\xf5\x11\x9a\x4f\x9f\xaf\xd7\xd1\x9d\xef\x07\xee\xc0\xa1\x57\x8b\xa3\x87\xee\x9b\x9f\x1f\x31\xbf\x78\x96\x97\x83\xf3\xd6\x4f\x0e\x5e\xba\xf8\x4b\xc5\xe9\x10\x57\x30\xfb\x53\xd3\x5e\x11\xa8\x2a\x63\x3b\x49\x1c\xd5\xdb\x70\x83\xf4\x79\x75\x27\x9e\xc5\x42\x7f\xf0\x58\xd5\x38\x9e\x75\x60\xef\x11\x56\x46\xf6\x68\x38\xf5\x6e\x1c\x50\xff\xaf\xb8\x1c\x8b\xfa\xf4\xfc\xb0\xff\x8f\xe3\x16\xc7\x8e\xeb\x65\xb9\xc9\x43\x7b\xcb\x71\xf5\xe1\xea\xe1\x61\x36\x99\xd1\xcd\x83\xae\x56\x54\xe0\xb1\xa8\x12\x9a\xac\xb2\xac\xaf\x35\xc6\xc9\xdb\xb6\xe0\xfa\x7b\xaf\x1d\xb8\x71\x6c\xe7\x48\x53\x1a\xd4\x1f\xa8\x7d\x6e\x6d\x71\xd3\xf0\x85\x5b\x09\x95\xa6\xc9\x8f\x75\xa7\xf2\x8d\x89\x4e\x24\xdf\x14\xc4\x99\x94\xee\x8e\x50\xb7\x9c\x4d\x24\x93\x5d\x53\x47\x54\xcc\x3f\xd1\xb5\x71\x76\x05\xaf\xec\x65\x90\xee\x82\x71\xa6\xb8\xbe\x67\x79\xa9\x65\x31\xa9\x2f\x86\x5c\x06\x91\x93\x0a\x5e\x24\x2c\xc5\x4a\x98\xd7\x8d\xf6\x17\xba\x72\xda\x21\xe1\xf0\x8f\xad\xd4\x78\x7a\xdd\xcf\xfa\x81\xf1\x8d\xf1\x62\xb6\x98\xbb\x46\xfd\x4c\xb1\x49\x00\x8e\x06\x5b\x74\xc5\xa5\x3b\x49\x32\x76\x5e\x53\x40\x00\xfd\xa0\xe8\x4d\xc5\xce\xb2\x45\xf7\x87\xc2\x82\xe8\xfd\x1c\xe0\xea\x24\xc0\x64\x7e\xbd\x58\x2c\x07\x00\x57\xc7\x01\xae\xce\x04\xd8\x59\xb6\x00\xff\x66\x42\xc8\xc7\x01\x40\x3c\x09\x30\x5d\x44\xe9\xbb\x21\x40\x3c\x0e\x10\xcf\x04\xd8\x59\xb6\x00\x3f\x29\xc6\x8a\x01\xbe\xe8\x24\xbe\xd5\x14\x57\xcb\xd5\x00\x5f\x74\x1c\x5f\x74\x26\xbe\xce\xb2\x1b\x45\x3b\x1c\xc2\x8b\x4f\xc2\x7b\xb7\x8c\x96\x88\x03\x78\xf1\x71\x78\xf1\x99\xf0\x3a\xcb\xae\xb8\x44\x35\xa4\x5f\x72\x12\xde\x15\xae\xd2\x68\x98\xdd\xe4\x38\xbc\xe4\x4c\x78\x9d\x65\x0b\xef\x33\x35\x7f\x9a\x07\x03\x84\xec\x74\x05\xe3\xbb\xe5\x2a\x1d\x20\x64\xc7\x11\xb2\x73\x2b\xb8\xb5\xec\x02\xa8\xe4\xe3\x30\xc1\xe9\x49\x7c\xd7\xe9\x72\xf9\xf6\x6a\x80\x2f\x3d\x8e\x2f\x3d\x13\x5f\x67\xf9\xdf\x00\x00\x00\xff\xff\x11\xe6\x8f\xae\xb8\x10\x00\x00")

func staticCssHydeCssBytes() ([]byte, error) {
	return bindataRead(
		_staticCssHydeCss,
		"static/css/hyde.css",
	)
}

func staticCssHydeCss() (*asset, error) {
	bytes, err := staticCssHydeCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/css/hyde.css", size: 4280, mode: os.FileMode(420), modTime: time.Unix(1433269733, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _staticCssPooleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x58\x6d\x6f\xe3\xb8\x11\xfe\xee\x5f\x41\xec\xe1\xd0\xdd\x85\x65\x3b\x2f\xce\xed\x3a\x45\x71\xed\xb6\xc0\x16\xd8\x6c\xb7\x77\xe9\x87\xa2\x29\x6c\x4a\xa2\x2d\x36\x94\xa8\x23\xa9\x38\xb9\x43\xfe\x7b\x67\x86\xa4\x2c\xc9\x72\x76\x2f\x82\x22\x8b\x1c\xce\x3c\x9c\x37\xce\x68\xfe\x76\xc2\xde\xb2\x13\x7f\xeb\xf5\xfa\xf4\xec\xfc\x6e\xcd\xee\x68\x7a\x8d\x7f\x71\x41\x7c\xde\xcd\xe7\x77\xec\x2e\xf2\x41\x3a\x78\xff\xc3\x7a\xbd\x81\xb1\x39\xeb\x3e\x91\x0c\x09\xe7\x34\x8b\x94\x34\xb2\x86\x7b\x3e\x78\xd2\xbf\x35\xbc\xc1\xc2\x39\xc9\x46\xd2\xe9\x7a\x4d\x04\xeb\xce\x73\x4e\x8f\xf0\xe6\x61\x7a\xb6\x73\x78\xce\x91\xa2\x7d\xd2\x03\x56\xfa\x47\xd8\x30\x09\x8c\x9b\x87\x29\x1c\xc7\xd7\xbf\x0a\x2b\x77\x95\xc8\xa7\x2c\x6d\xa4\x72\x53\xc6\xab\x9c\x19\xa1\x04\xb7\x22\x67\x4d\x95\x0b\xc3\x6e\xfe\x7e\xcb\x94\xcc\x44\x65\x05\x4b\x9f\xd8\x8f\x65\xae\x67\xec\x93\xe0\xa6\x62\xa5\x36\x82\x71\x87\x9c\x0a\xe7\x6a\xbb\x9a\xcf\x77\xd2\x15\x4d\x3a\xcb\x74\x39\xaf\xb5\x56\xc2\xff\x9f\x01\xc9\x7c\x32\x99\x78\xfb\x7c\xd0\x95\x13\x95\xb3\x01\xc4\x5f\x74\xfe\x04\x42\xad\xa0\x11\xf6\xa1\xb1\x4e\x97\xcc\x3d\xd5\x02\x5f\x6f\x84\xb5\x7c\x27\x6c\x5c\xc8\x65\x25\x0c\x4d\x70\xeb\x0a\xc1\x73\xfc\xfd\x45\x5b\x67\x09\x7c\x1d\x69\xbf\xf0\x9d\xac\xb8\x93\xba\xc2\xb7\x9f\xc4\x83\x30\xb0\x01\xc5\x9f\x74\x43\x80\x6f\x0b\x51\x12\xe5\x01\x57\x1f\x08\x8e\xfc\xab\xce\xb9\x13\x0c\xe4\xb0\xad\x06\x75\x10\x3f\xae\x48\xd2\x4e\xe9\x14\x7f\xda\x5a\x64\x20\x5c\x6f\x89\x0c\xe5\x87\xdd\xbe\x65\xbf\x4d\x18\x4b\xf6\x22\xbd\x97\x2e\x49\xf5\x63\x62\xe5\xaf\xb2\xda\xad\x58\xaa\x0d\x68\x16\x87\xae\x27\x64\x92\xa4\xd4\xbf\xbe\x4c\x41\x7f\xa7\x28\x9e\x27\x93\xc2\x95\x6a\x3a\x49\x71\x07\x28\xb5\xe4\x06\xb6\xbf\x62\x0b\x5c\x5e\xf3\x3c\xa7\x35\x8b\x96\x94\x88\xb6\xa0\xce\x64\xcb\x4b\xa9\x9e\x56\xec\xd5\x47\xa1\x1e\x84\x93\x19\x67\x9f\x45\x23\x5e\x4d\x59\x3b\x30\x65\x7f\x36\x92\xab\x29\xb3\xbc\xb2\x89\x15\x46\x6e\xaf\xe3\x72\x80\x23\x56\xec\xec\xaa\x26\xa0\x0a\x8c\x93\x14\x42\xee\x0a\x07\x83\xb3\x25\xca\xfb\xb1\x14\xb9\xe4\xec\x75\x29\xab\x64\x2f\x73\x57\xac\xd8\xc5\x3b\x51\xbe\x21\x08\x2d\x96\x1e\xbb\xf3\x85\x67\xf7\x8c\x70\xdb\x3d\x65\x5a\x69\xb3\x62\xdf\x2d\xcf\xf0\xc2\xf9\x94\x67\xf7\x3b\x83\x86\x49\xe2\xe4\x76\x4b\xd8\xa2\xd6\x9d\x78\xf4\x4c\x13\x9e\xff\x0f\x1c\x0b\x50\x2d\x16\xdf\x47\x9d\x26\xa5\x3d\x49\xf1\x8c\x5e\xc1\x3e\x6b\xb6\x59\x3d\x48\x2b\x9d\xc8\x37\xcc\x3a\xf4\x06\x69\xc1\x49\x7e\x69\xa4\x81\x10\x81\x80\xc8\xc5\x96\x37\xca\xb1\xd7\xa9\xd1\x7b\x50\x8e\x65\x7b\xa9\x14\x6b\xc0\xdb\x36\x7c\xf3\x06\x5d\x81\xf7\xf0\x9f\x5f\xbd\x4b\xf3\x73\xc4\x40\xb2\x73\x91\x69\x43\x8e\xb5\x62\x95\xae\x04\x8a\x06\xc9\x9b\xd5\x56\x67\x8d\xdd\xa0\x38\x50\xeb\x3d\x08\x73\x08\xa6\xd0\xe0\xc9\x1b\xd0\x96\x81\xed\x5b\x99\x31\x9e\x65\x10\x22\x32\x95\x4a\xba\x27\x92\xe6\x69\xa6\xf0\x83\x58\x90\xf0\x23\x51\x14\xdc\x68\xaf\xb8\xd5\x8f\x10\x4b\xe0\x25\x16\x59\x14\x67\x53\x56\x9c\xc3\x7d\x01\xf7\x25\xdc\x4b\xb8\xaf\x3a\x9e\x05\x7e\xe7\x20\x4a\x57\x6c\xb6\x34\xa2\x6c\xbd\x61\x1f\x4c\x9f\x6a\x95\x8f\xf8\xc3\xf9\xf2\xba\xa3\x87\x8b\x33\xbc\x5a\x3d\x18\x81\x88\xc8\x4f\x75\xed\x64\x09\x26\xf9\x24\x76\x61\x5f\x08\xb2\x38\x3b\x78\x6d\xf0\x13\x92\x0d\x33\xe7\x5d\x68\x4e\xd7\x20\xac\x0b\x2b\x38\x69\xc0\x0a\xf4\x17\xc7\xf4\xfd\x8d\xc4\x15\xe7\xed\x92\x51\x2d\x9c\x14\x15\x56\xa1\x5e\x29\xab\xe0\x0e\x51\xb1\xf5\xd1\x6a\x8a\xd0\x81\x52\xdb\xe5\xd6\x19\x5d\xed\x7a\xde\x73\xb1\xc0\x8b\x66\x91\xfb\x27\x89\x99\x0f\x38\x37\x10\x9f\x1a\xee\x5c\xfd\x3e\x11\xb9\x3b\x68\xb5\x6f\xbe\xe7\x49\x9e\xbf\x60\x72\xbf\xbb\x1b\x69\x33\xf2\x18\x43\xa4\xb5\x86\x50\x21\xff\x82\x53\x04\x3c\xed\x41\x5c\x77\xb2\x91\x57\xb2\xc7\xe3\xf3\xd7\xaa\xfb\x12\xd4\x59\x3f\x32\xab\x95\xcc\xd9\x77\x42\x88\xce\x6c\x0b\xfd\x40\x40\xd1\x0e\x40\x78\x9a\x9a\xa1\x73\xbc\x5b\x7e\x7f\xd2\x2f\xdb\x54\xb2\x5c\xb6\xfe\xe7\x0c\x64\x37\x08\x2b\x90\xd0\xd4\xb5\x30\x19\x9c\x81\xc8\x1c\x79\xff\xc7\x49\xa7\xc4\x7f\xbd\x21\x1a\x63\x71\x71\x21\x54\x7d\x02\x5d\x0e\xbf\x05\xe2\x5f\xe2\x15\x55\xf5\x41\xe7\x02\x55\x95\xc1\x73\x3a\xa9\xe1\xe8\x3c\x4a\xc2\x37\xa2\x52\x7a\xca\x6e\xe0\x90\xc9\xe0\xf9\xea\x83\x6e\x8c\x84\x33\xf8\xb3\xd8\x43\x42\x2e\x75\xa5\x6d\xcd\x33\x82\x85\x5c\xbc\xca\x63\x76\x07\x67\x05\xe5\xce\x96\x47\xde\x18\x34\x11\x37\x9d\x6e\xaf\xce\xae\xf8\xa9\xfc\xf9\x1e\xaf\xce\xbe\x0c\x64\x85\xc6\x42\xce\xae\xe9\xa0\x89\xb0\x73\x69\x6b\x38\x4c\x41\xa5\x4a\x67\xf7\xd7\xdf\xec\x71\x1d\xbc\x23\x71\x33\x7b\x17\xc6\x06\x89\xe3\x12\xc7\xf6\x05\x64\xe1\x84\x14\xb0\x62\x80\x63\x6c\x2c\xd9\x1b\x4e\x56\xd9\x03\xfa\x24\x35\x82\xdf\x03\x44\x7c\x24\x5c\xa9\x76\x02\xa9\xe2\x38\x0e\x7c\x45\x19\x7e\xdb\xc7\x1a\x5f\x0c\xc3\x3e\x9c\x2d\x61\xbd\xac\x0a\x48\x68\x6e\x9c\x39\xb9\x5b\xcd\x21\xeb\x39\x14\x30\x2b\x60\xaf\x0a\xf7\x3b\x16\x72\x51\x55\x03\x9b\x5c\x7a\x9b\x74\xd6\x46\xf3\x0c\xd6\x2f\xa2\x0f\xfe\xb3\xd1\x4e\x50\xbe\x20\xbb\xfd\x82\xaf\x03\x2f\xa2\x10\x8d\x02\x63\xe4\x92\x61\xfc\x7e\xa3\x72\x7e\xe0\x78\x75\x50\x29\xb1\x75\xe4\x85\x48\x1a\x23\xb8\x8d\x80\x8e\xbc\x7a\xa5\xa0\x76\x4b\xb2\x42\xaa\xd1\x04\xb3\x38\x55\x36\x2c\x62\xd9\x30\x00\xdf\xc2\x4f\x8c\xf7\x98\x98\xcb\x0f\x13\x1e\x5c\x9b\xd0\x43\x6d\x21\xcb\xdd\x8b\xde\x0c\x58\xe0\x3a\xa1\xfd\xa5\x2f\x52\x4a\xfe\x18\x01\x76\x2b\x87\x5b\x9e\x2a\xaf\x69\x87\xbf\x5e\xb2\x6a\x6f\xf5\x21\x33\x76\x13\x61\x50\x63\x8b\x01\x8c\xa0\x78\x6d\xc1\xe7\xe2\x2f\x94\xeb\xf2\xe9\xc4\x15\x47\x59\xc1\x50\x5a\xe8\x6d\x62\x94\x3b\x30\xa0\x62\xcb\x99\x55\xe5\x0a\x6f\x9f\xd7\x3a\xcf\xdf\x30\x62\x7c\x6a\xce\x0b\x7c\x31\x7c\xda\xca\xbf\x57\xdb\xe3\xc8\xdf\x1e\xa1\x15\xc0\xb2\xdd\xf0\x1d\x04\x65\x81\xd5\x13\x70\xdc\xcc\xa0\x07\xc9\x7d\x99\xa3\x40\x6b\x90\x03\x65\x05\x87\x61\xde\x64\x4e\x1b\x7f\x9e\x86\x32\x9b\x28\x87\xc9\xbf\x63\xe8\xde\x01\x70\xb1\x58\x74\xf1\x74\x9a\x0b\x7c\xfd\xb9\xd0\x7b\xc6\x95\x30\x8e\x95\x61\x06\x8b\xae\x06\xab\xba\x19\xfb\xb7\x6e\xc0\x82\x4f\x0c\x34\xcb\xa4\xc3\x09\x0b\x1a\x06\xd3\x42\xbf\x54\x62\x3f\x03\x59\xeb\x1e\xfa\x21\xb6\xf9\x63\xfd\xa7\xcd\x14\x19\x02\x7a\x20\xe3\xcc\xc7\x39\x93\xd4\x23\x60\xcf\x04\x77\x09\x45\xa3\xac\xbb\xcb\x91\x23\x20\x88\xfb\x0a\x10\x5e\xf2\x9c\xa3\x5c\xda\x06\xe7\x19\x5e\x5f\x4d\x6b\xdd\x8e\x2c\x36\x56\xf4\x0e\x78\x40\xe5\xb1\xa1\x01\xb6\xd4\xb1\x45\x64\x59\x24\x0f\xd8\x1e\x0f\x85\x7d\x1f\x58\x08\xbb\x21\xde\x18\xa6\xfd\x2c\x13\x89\x79\xe3\x74\x67\x34\xd0\xfa\xd1\x8e\xe9\x0e\xed\x1f\x99\xae\x81\x23\x9b\xd9\x12\xb2\x3c\xc3\x61\x78\xe1\x29\x94\xc1\xb4\x87\x00\x9f\xbc\x09\x4b\x79\x56\xf1\x52\x50\x13\x07\xfa\x06\x63\xe7\xc2\x66\x46\xd6\x58\xb8\xb4\xca\x0f\xec\xbb\xc1\xe4\xcf\x36\x76\xbc\x9d\xa1\x59\x06\xd6\xba\x08\xf5\x52\xcb\x34\xa1\x72\xe2\x9b\xea\xb4\x5e\xca\x5d\x2e\xf0\x1a\x63\xd5\xef\x30\x4e\xd3\x79\x05\x0d\x82\xe5\x87\x91\x4a\xe9\x72\xd1\x93\x9c\x2d\xf0\xa2\x93\x59\x40\x6d\x63\xe8\xc8\xed\xf4\x94\xc1\x28\xc7\x7d\x38\xc5\x38\xcf\x0a\xac\x0c\x1d\xf6\x32\x78\xf4\xd6\x50\x1c\xc9\x0a\x82\x1c\x07\x37\x44\x0f\x33\x0d\x7e\x73\xd0\x55\xdb\x50\x11\x1b\x5c\xe5\x9b\x76\x88\x40\x64\x84\x0c\xc9\x27\x8f\x78\xc1\x60\xcb\x4b\x57\xea\xa9\x65\xd8\xba\xb1\x67\x14\x4d\x8c\x43\xd3\x09\x61\x18\x8b\xb1\xcb\x4e\x09\xaf\xf4\xce\x43\x01\x07\x22\x4e\x5e\x9b\xc0\x86\xb8\x78\xe5\x06\x5e\x23\x2f\x03\xf3\x1c\x4a\xf8\x53\xab\xc7\x5c\x23\xd4\xdb\xc2\x71\x96\x73\xf8\x87\x25\x12\x4b\x85\x82\x94\x45\xd0\x3a\x90\x90\x0f\x7d\xb8\xf8\x7a\xa5\x96\xb4\x07\xc3\x89\x14\x13\x41\xbf\xe7\x78\x45\x18\x3f\x61\x75\x2f\xbc\x7d\xe8\x90\x9b\x99\x30\x72\x14\x2f\xe7\x27\x82\xe5\xbc\x7f\xaa\x8e\xd6\xfe\xcf\x2d\xdf\xc4\x4b\xfa\xed\x28\xb7\x78\xa7\x84\x2e\x28\xb1\xee\x49\x89\x43\x0f\x3d\x58\x39\xd2\xf3\x2d\x46\xc8\x94\x7c\x31\x46\x5a\x6d\xbc\x7f\x3f\xbe\x38\x34\xdf\xbf\xb7\xe1\x3f\xcd\xe8\x80\x66\x58\x55\x76\xc2\xae\xfb\xad\xeb\x90\x0d\xa9\x24\xf4\x01\xcd\x5e\x7f\xbc\xbd\xf9\x04\x69\xda\x8a\x37\xe8\x08\x3b\x74\xe3\xb0\x66\xc6\x36\x10\xcd\xd5\xc6\xd2\xb1\x54\x1b\xfd\x20\x73\x41\xb9\x72\x5f\x08\xfa\x7a\x76\x38\xb4\x2a\xed\x3f\xfa\x41\x9d\xf9\x20\x75\x63\x31\x20\x2a\xec\x6d\x3d\xee\xc1\x09\x76\x90\x41\x1b\xc0\xfd\x6c\xc1\x5f\xa1\x77\x92\x79\x2e\xaa\x6b\x06\x9e\x94\xc1\xf1\x6d\xb6\xf2\x11\x57\x0c\x4e\x82\x64\x90\x4f\xc3\x49\x90\xf4\x1a\x87\xf6\xfb\xd5\x97\x5b\xf6\x33\x94\xd4\xdf\xf0\xe1\xaa\x4d\x6a\x59\xd6\x1a\x85\x83\xb2\xc0\x1e\x19\x1d\x7c\xd1\xcb\x0f\x7a\x85\x03\x5f\x94\x96\x65\xbc\x82\x90\x6b\xf5\x05\x9b\xdf\xf0\x8d\x8d\x79\x20\xd0\x26\x48\x7b\x22\xf4\x8e\x0e\xec\xb1\x72\x2c\x78\xfe\x80\xe3\x6a\x2b\xcd\x4b\x55\x73\x72\xe6\xbb\x01\x04\xfe\x0f\x4c\x7f\xd1\x92\x9c\x05\x4f\xa2\xaf\x57\x54\x51\xf9\xef\x49\xf5\x70\x7b\xf8\xf1\xe8\x48\xec\xc1\x9f\xc7\x4a\x89\x25\x5e\x24\xf6\xc5\x82\x7d\xe8\x0a\x87\x02\xfb\xa2\x6d\x2c\x9e\xfb\x74\x07\x35\x82\xa5\x95\xe6\x60\x79\x74\x0b\x5f\xd6\x07\x01\x4b\x5f\x31\x8f\xad\x3c\x52\xd7\xf8\xd1\xda\xcd\x3f\xe4\x76\x6d\x79\x0f\x7f\x97\xf5\x63\x8f\xc6\xaf\xec\x93\x5d\xc6\x4f\x95\x23\x10\x06\x6d\xce\x91\x7b\x0f\xd8\x23\x04\xf2\xf1\x6f\xc0\xd0\xa7\xbb\x3c\x7c\x2f\xfd\x7f\x00\x00\x00\xff\xff\x1c\x67\xf9\x5a\x03\x19\x00\x00")

func staticCssPooleCssBytes() ([]byte, error) {
	return bindataRead(
		_staticCssPooleCss,
		"static/css/poole.css",
	)
}

func staticCssPooleCss() (*asset, error) {
	bytes, err := staticCssPooleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/css/poole.css", size: 6403, mode: os.FileMode(420), modTime: time.Unix(1433269733, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _staticCssSyntaxCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x96\xdf\x73\x9b\x38\x10\xc7\xdf\xf3\x57\x30\xd3\xb7\xde\x95\x3a\x25\xa5\xa5\x79\x72\x49\x68\x32\x97\x6b\x32\x4d\xe6\xfa\x2c\xc4\x02\x9a\x08\x89\x91\x84\x6b\xcf\x4d\xff\xf7\x13\x48\xd8\x12\x26\x31\xa7\x27\xff\xf8\xec\x4a\xbb\xdf\xdd\x95\xc2\x9a\xd2\xe0\xdf\x20\x47\xf8\xb9\x12\xbc\x63\xc5\x3b\xcc\x29\x17\x5f\x82\x37\xa5\x5e\x18\x07\xbf\xcf\x82\xf7\x6f\x5d\xa0\xff\x6b\x55\x46\x65\x74\x19\xfc\x7e\xfb\xfe\x2c\xc4\xda\x7c\xb4\x49\x92\x44\xff\xaa\x0d\x82\x94\x37\x0d\x30\x15\xf4\x04\x08\xe1\x30\xeb\xf5\x4a\xaf\xcb\xb9\x2d\xb3\x6c\xad\x97\x71\x70\x2d\x04\x17\x83\xf9\xb3\x63\xbc\x5a\xc5\xf1\x7e\x8f\xbf\x60\xf7\x8b\x8b\x62\x80\xb8\x03\x7d\x1c\x96\x61\xee\x5b\x10\x48\x59\x4f\xb8\xf1\x5c\x25\x49\x96\x5d\x06\x25\x67\xea\x9d\x54\x3b\x0a\x5f\x02\xa2\x10\x25\xd8\x8b\x20\xfc\xbb\xa3\x8a\x50\xc2\xc0\xb8\x68\x27\x2e\x92\xc4\xc7\x1f\x04\xb4\x82\x63\x03\x9f\xbf\x96\x9b\xf0\x91\xb0\x8a\x5a\xb7\xf2\x75\xb2\x05\x4c\x10\x1d\xd0\xaa\x98\xd7\x2b\xcb\x52\xbd\x74\x5e\x75\x4a\x40\xff\x70\xde\x6e\x03\xc9\x29\x29\x82\x37\x69\xda\xa7\xdc\xb8\xfc\x06\x0c\x04\xc1\xe1\x15\x50\x50\x60\x92\x57\x81\x76\xf9\x52\x1e\x46\x83\xeb\xa6\xad\x0d\xed\xaa\x99\x65\xc7\xae\x0f\xd2\x55\xb5\x97\xad\x28\xea\x85\xf7\xd8\x1b\x40\x85\x4e\x83\xa1\xc9\x7c\x64\x69\xda\xc7\x36\x1b\xd9\x6a\xd5\xc7\xe6\xbb\xbc\x65\x12\xc4\x3e\x34\xee\x95\xde\xa1\xbe\x46\xfa\xbe\x53\x6d\x67\xea\xb4\xf2\xb5\xed\xd5\x9d\x9c\xf6\x41\xf0\xa6\xb5\x70\xaf\x98\xf7\xe7\xa3\x12\x7c\x8c\xa4\x3b\x15\xf7\x63\x97\xd7\x6e\xe8\xca\xd3\x3f\x4d\xe3\xd8\xe7\x9f\x04\xc2\xd0\xe7\xc6\xb4\x04\x3e\xd1\x13\x61\xca\x99\x54\xc8\x36\xe0\x73\x71\x0a\xbf\x02\x4c\x91\x6e\x14\xc2\x99\xb1\x60\xa7\x2c\xbe\xa3\x06\x64\xab\x0f\x65\xf8\xf6\x88\xf7\xf1\x07\x09\x5d\xc1\x0d\x2b\x4e\xf9\xfe\x01\x5a\xc1\x8d\x55\xf0\x59\x79\xf8\xa7\x4f\x9f\x3f\x4f\xf0\xa7\x5d\x6b\x4e\xd1\x78\x85\x19\xc7\x63\x65\xdc\x11\xa5\xa7\x00\x0d\xbf\x77\x4d\x0e\xa6\x32\xdd\x7e\x2b\x2e\x2e\x92\x8f\x13\x54\x8b\x39\x6a\xc3\x90\xc3\x5e\x94\x49\x89\x4b\xc3\xf6\x29\x08\xd7\x4a\x93\x79\xa7\xcc\x09\x58\xee\xb0\x51\x14\xc7\xa3\x8e\x03\xfb\xb5\x23\x7a\x96\x98\x0c\x33\x5f\xc2\xf5\x7a\x1f\xd6\x80\xa6\x14\x49\x69\x40\x3e\x71\x39\x46\x65\x38\x57\x67\x56\xf8\x53\x44\xcf\x37\x07\xd5\x1a\xf3\xc3\x2c\x64\x64\xc2\xee\x55\x18\xe0\x6b\xa6\x88\xda\x19\x12\x1c\xd2\x8c\x12\x8f\xdc\x62\x68\xf7\x85\xc3\xca\x09\xec\x1d\x21\xeb\x18\x3e\xa0\xf4\xb5\xd3\xde\xa1\x1c\xcc\xc0\x63\x7e\x2d\xf6\xd3\xc0\xdd\xdf\x2f\x44\xe6\x56\xcb\x87\x32\xd6\x72\xb9\xf0\x13\xb2\x9a\x6e\x26\x0d\x1a\x45\x0e\xf5\x0f\x12\x04\xe5\x76\x34\xf3\x5f\x93\xa9\xb0\x0f\x7f\xbc\x5b\xc2\x9f\xe3\x2d\xe4\xa2\xf9\xb0\x0c\xf9\x04\x5b\x15\xfe\xac\x75\x6d\x1d\x4e\xda\x94\x8b\xaa\x35\xcc\x28\x47\x46\xde\xa6\x5e\x66\x71\x03\x5b\xc3\x93\x65\xfc\x2d\x53\x50\xd9\xbe\x68\xf8\x32\x9b\x7b\x6c\xce\x24\x73\x4f\xef\x7e\xd2\xcd\x35\x52\xf8\x55\x8f\x2e\x45\xec\xf8\x92\x78\x99\x51\x5a\x23\xdb\xad\xc5\x91\xc1\xcb\x17\xf7\xc4\xc9\x95\xbd\x8c\xe5\x87\x65\x9b\x5e\xf1\x6e\x94\x5e\xc2\xcc\xb6\x73\x36\xd7\x12\x23\x3b\x83\x64\xbd\x6c\x9b\x1b\x10\x50\x8c\x47\x23\x47\xef\xa3\x59\x9b\x5e\x28\xd1\x72\xd3\x16\x72\xbb\x6c\xa3\x7b\x55\x8f\x33\x4f\x78\x93\xe4\x70\x17\x4e\x2c\x7e\xe8\x6a\x30\x15\x24\xcf\x97\xed\xe1\xbc\x64\xa4\xf4\x0a\xa8\x37\x9a\x37\xd9\x35\xb9\x8d\x24\x6f\x17\x0c\x4d\xf7\x06\xd9\xe0\x25\xdd\xeb\xcc\xd0\x4d\xb5\xc8\xe0\x1b\xe5\xb9\x7d\x65\x6d\xc8\x22\x8b\xdb\x61\xfa\xda\x8e\x26\xf4\x7f\xf5\x5b\x78\x67\x9f\x0b\xfd\xf3\x4f\x06\x21\xff\x73\xfc\x10\xfc\x11\xe8\x41\x36\x7e\xd5\x23\x6d\xf8\x7e\xf4\x42\x3c\xfb\x2f\x00\x00\xff\xff\xd5\x66\xe9\x24\xbd\x0b\x00\x00")

func staticCssSyntaxCssBytes() ([]byte, error) {
	return bindataRead(
		_staticCssSyntaxCss,
		"static/css/syntax.css",
	)
}

func staticCssSyntaxCss() (*asset, error) {
	bytes, err := staticCssSyntaxCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/css/syntax.css", size: 3005, mode: os.FileMode(420), modTime: time.Unix(1433269733, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _staticTemplates_footerHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\xaa\xad\xe5\x52\x50\xb0\xd1\x4f\xc9\x2c\xb3\xe3\x82\x52\x40\x3a\x29\x3f\xa5\x12\xc4\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x4e\xcd\x4b\x01\x2a\x04\x04\x00\x00\xff\xff\x67\x8c\xd8\x75\x3d\x00\x00\x00")

func staticTemplates_footerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticTemplates_footerHtml,
		"static/templates/_footer.html",
	)
}

func staticTemplates_footerHtml() (*asset, error) {
	bytes, err := staticTemplates_footerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/templates/_footer.html", size: 61, mode: os.FileMode(420), modTime: time.Unix(1433269733, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _staticTemplates_headerHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\x4d\x93\xda\x38\x10\xbd\xf3\x2b\x34\xba\x0e\xb2\xa0\x76\xaa\x76\x87\xc5\xa4\x52\xf9\xa8\xdc\x32\x15\xe6\x92\xa3\xb0\xdb\xb6\x6a\x64\xc9\x91\xda\x60\xc2\xf0\xdf\xd3\x32\x36\x43\xe0\x32\x07\xb0\xd4\xfd\xfa\xeb\xf5\xd3\xe1\x90\x43\xa1\x2d\x30\x5e\x81\xca\xc1\xf3\xe3\x71\x79\xf7\xf9\xfb\xa7\xe7\x9f\x4f\x5f\x58\x85\xb5\x59\x4d\x96\x77\x42\xb0\x4d\xab\x4d\xce\xb6\xe0\x83\x76\x76\xc1\x0e\x07\x96\xf4\xa6\xc1\xc2\x8e\x47\x26\x04\x61\x63\x08\xeb\x6a\x63\x43\xca\x2b\xc4\x66\x21\xe5\x6e\xb7\x4b\x76\xff\x24\xce\x97\x72\xfe\xf8\xf8\x28\xbb\x88\xe1\x11\xb4\x30\xca\x96\x29\x07\xcb\xd9\x78\x12\x6d\xe0\x31\x0d\x35\xb3\x9a\x30\xb6\x34\xda\xbe\xb0\xca\x43\x71\x4e\x57\xd6\x4d\xd9\x27\xeb\x0a\x2b\xe7\x73\xce\x3c\x98\x94\x37\xde\x15\xda\x00\xef\x83\x6a\x40\xc5\x22\x5c\xc0\xaf\x56\x6f\x53\x9e\x39\x8b\x60\x51\xe0\xbe\x01\xce\x86\x5b\xca\x11\x3a\x94\xb1\x9b\xff\x59\x56\x29\x1f\x00\xd3\x16\x0b\xf1\xdf\x45\x16\xab\x6a\x48\xf9\x56\xc3\xae\x71\x1e\x2f\x62\x77\x3a\xc7\x2a\xcd\x61\xab\x33\x10\xfd\x65\xca\xb4\xd5\xa8\x95\x11\x21\x53\x06\xd2\x79\x32\x9b\xb2\x5a\x75\xba\x6e\xeb\xd1\x74\xca\x8c\x1a\x0d\xac\x4a\x27\x3c\x8d\xb9\x94\xa7\xeb\x79\xda\x7e\x9e\x80\x7b\x03\xa1\x02\xa0\x9a\xa7\xf1\xb3\x10\x64\xe3\x9c\x81\x84\x4e\xfc\x5d\xf0\xb0\xb7\xa8\xba\xf7\xe3\xab\x7d\xfe\xce\xec\x91\xdc\x40\xcb\x28\x88\x8e\x90\x94\xce\x95\x06\x54\xa3\x43\x92\xb9\x5a\x52\x86\x0f\x85\xaa\xb5\xd9\xa7\x4f\xcf\xf7\x6b\x65\xc3\xe2\x61\x36\x9b\xd2\x4f\xa3\x32\x3a\x9b\xfe\x3b\x9b\xbd\x7e\xdc\x78\x6d\xee\xbf\x2a\x2c\x54\x06\xd7\x05\x55\xd3\x18\x10\xe8\xda\xac\x12\x9a\x28\x17\x8d\x07\xca\xdc\xb8\x00\x39\x67\x41\xff\x06\x92\xd7\xfc\xe1\xa1\xa3\xdf\xd8\x92\xbc\x09\x22\xe7\x65\x60\xd2\xd8\xf2\x66\xb2\x8a\xb6\x9a\xb5\xc8\x62\xc0\x39\x53\xa1\xb6\xf1\x9e\xd0\x1f\xbf\x56\xa1\xf4\xc4\xcf\xd0\xa5\x41\xf0\x56\x21\x49\x2a\x0a\xeb\xd4\xb6\xce\x14\xd2\x83\x88\xb0\xfb\x2e\xea\xbc\xdf\x6e\xca\x87\x6d\xb3\x1f\xeb\x35\x2b\x20\x8e\x21\x49\xe7\xf2\x24\xf4\xc9\x72\xe3\xf2\x3d\xcb\x8c\x0a\x34\x18\x56\x50\x83\xd8\xa8\x00\x62\x16\xb5\x38\x59\xe6\x7a\x3b\x3a\x83\xce\x61\xa3\xfc\xa9\xaf\x0b\x7b\x14\xa6\xa2\x87\xec\xd9\x80\x10\x01\x75\xf6\xb2\xef\x81\x7f\x43\x47\x80\xda\xb8\x16\x07\x3f\x21\xaa\xf9\x9b\x24\xe9\x3c\x9a\x9b\x31\x8c\x36\x9c\x9f\xd1\x8a\x35\xf4\xf2\x9d\x55\x86\xc5\x08\x6d\x4b\xa3\x03\x8e\x31\xb2\x19\xaa\x4a\x2a\x3b\x1c\x5b\x73\x5d\xdf\xaa\xed\x5b\x75\x35\xf2\xcb\x57\xdf\x5c\x0d\x4b\xa9\x56\xec\xf5\xc2\x1c\x69\x5f\x11\x79\x37\x8e\x80\x0a\xc9\xb5\x8e\x9f\xe8\x1c\x0a\xb7\xa6\x67\xe8\xd4\xc0\xf0\x99\x5c\x13\x46\x2f\x99\x9d\x89\xbb\xa1\x94\x54\x13\x33\x4f\x0e\x07\xb0\xf9\xf1\x38\xf9\x13\x00\x00\xff\xff\xa1\x2e\x32\xea\x2c\x05\x00\x00")

func staticTemplates_headerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticTemplates_headerHtml,
		"static/templates/_header.html",
	)
}

func staticTemplates_headerHtml() (*asset, error) {
	bytes, err := staticTemplates_headerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/templates/_header.html", size: 1324, mode: os.FileMode(420), modTime: time.Unix(1433269733, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _staticTemplatesConfirmationHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8e\x31\x0a\xc3\x30\x0c\x45\xf7\x9c\x42\x78\x6f\x4d\xf6\x24\x77\x11\x95\x82\x02\x76\x6d\x62\xd1\xc5\xf8\xee\x15\x75\x9b\x5a\x93\x78\xff\xf3\x79\xb5\x2a\xc7\x1c\x50\x19\x9c\x30\x12\x9f\xae\xb5\x09\xec\x16\x3a\x5e\xf0\x08\x58\xca\xea\x72\x2a\xea\xb6\x0f\xb6\x40\xe6\x91\xdf\xf4\xd0\xc0\x57\x6a\x39\x82\x9c\xbc\xaf\xce\x0f\x10\x40\x52\xe4\x7f\xc7\xe3\x35\xe7\x65\xee\xff\x92\x7f\xac\x56\xb8\x8b\x6d\x3f\x31\x32\xb4\x06\x48\xc4\xd4\x3b\xfe\x5b\x5a\xbc\xf9\x6d\xd3\xe8\xbf\xa7\xa4\xdd\xff\x1d\x00\x00\xff\xff\xc8\xf4\xaf\xbe\xd6\x00\x00\x00")

func staticTemplatesConfirmationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticTemplatesConfirmationHtml,
		"static/templates/confirmation.html",
	)
}

func staticTemplatesConfirmationHtml() (*asset, error) {
	bytes, err := staticTemplatesConfirmationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/templates/confirmation.html", size: 214, mode: os.FileMode(420), modTime: time.Unix(1433269733, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _staticTemplatesErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\xca\x48\x4d\x4c\x49\x2d\x52\xaa\xad\xe5\x52\x00\x02\x9b\x94\xcc\x32\x85\xe4\x9c\xc4\xe2\x62\x5b\xa5\x82\xfc\xe2\x12\x25\x3b\x88\x70\x01\x84\x56\x50\x70\x2d\x2a\xca\x2f\xb2\x52\xa8\xae\x56\xd0\x4b\x05\x31\x7d\x53\x8b\x8b\x13\xd3\x53\x15\x60\xfa\xf5\xa1\x2a\x6d\xf4\x81\x26\xd9\x71\x21\xdb\x94\x96\x9f\x5f\x02\xb1\x09\x10\x00\x00\xff\xff\xcb\xce\xfc\x87\x80\x00\x00\x00")

func staticTemplatesErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticTemplatesErrorHtml,
		"static/templates/error.html",
	)
}

func staticTemplatesErrorHtml() (*asset, error) {
	bytes, err := staticTemplatesErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/templates/error.html", size: 128, mode: os.FileMode(420), modTime: time.Unix(1433269733, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _staticTemplatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x91\xc1\xae\x9b\x40\x0c\x45\xf7\xf9\x0a\x6b\x36\xaf\x55\x55\xd8\x57\x40\x17\xed\xe6\x49\x55\x17\x89\xfa\x01\x86\x71\x60\x1a\x18\x8f\x3c\x06\x1a\x21\xfe\xbd\x43\x12\xa2\xbc\x8d\x25\x6c\x7c\xee\xbd\xe3\x65\x51\x1a\x42\x8f\x4a\x60\x3a\x42\x4b\x62\x20\x5b\xd7\x43\x61\xdd\x04\x4d\x8f\x31\x96\x26\x70\x54\x53\x1d\x00\x8a\xb0\x55\x80\x9f\x82\x2d\x68\x47\x50\x8f\xaa\xec\xa1\xa6\x9e\x67\x50\x86\x2b\x8f\x02\x67\x9c\x58\x9c\x52\xcc\x6b\xe6\xcb\x80\x72\x89\x50\xa3\x64\xf0\xae\xe0\x22\x20\xec\xed\x9e\x14\xe6\xce\x35\x1d\x08\x59\x27\xd4\x68\xdc\x20\x1b\xd8\x22\x0d\x09\x8c\xde\x42\x54\x16\x8a\xb7\x6e\x33\x8a\x90\x57\x08\xd8\xd2\x53\x4e\x92\x6b\xe7\x5b\xe8\x5d\xd4\x0c\x7e\xd3\x3f\x4d\x2b\x14\x36\xa9\xf4\x0b\x5a\x7b\x5b\x2d\x10\x3a\xa1\x73\x69\x72\x89\xd1\x54\x5b\x2d\x72\xac\x80\xbc\x0d\xec\x12\x73\xc7\x1d\x4f\x27\xc0\xb6\x15\x6a\x31\x09\x67\x5b\xea\x3c\xbc\x86\x7f\x92\xfe\xe2\x84\xb1\x11\x17\xf4\x5b\xcf\x0d\xaa\x63\x9f\xdd\x26\x6f\xcb\x02\x59\x24\x99\x48\x7e\x3d\x06\xb0\xae\x79\xb2\xf2\x7d\x94\xbe\x7c\xfb\x42\xbe\x61\x4b\x7f\x8e\xef\x3f\x78\x08\xec\x53\xa4\x4f\xb3\xf3\x96\xe7\xec\x03\xe8\xb3\xb9\x2b\x26\xcd\xc7\x43\xeb\x35\x50\x69\xee\x1f\xa6\x6a\xf9\xeb\x16\xbe\xc8\xef\x8d\x87\xbd\x94\x6a\x37\x5d\xe4\xe9\x8a\xd5\xe1\xf5\xc6\x67\x66\xdd\x6f\xfc\x3f\x00\x00\xff\xff\xe9\x26\xb0\x90\xfc\x01\x00\x00")

func staticTemplatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticTemplatesIndexHtml,
		"static/templates/index.html",
	)
}

func staticTemplatesIndexHtml() (*asset, error) {
	bytes, err := staticTemplatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/templates/index.html", size: 508, mode: os.FileMode(420), modTime: time.Unix(1433269733, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _staticTemplatesStatsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x41\x6e\x85\x30\x0c\x44\xd7\x70\x0a\xcb\x07\x28\x52\xd7\x10\xa9\x8b\x9e\xa0\x27\x70\x89\x7f\x41\x0a\x24\x8a\x5d\x54\x09\x71\xf7\x9a\x84\x5f\xb1\x28\x1b\xac\xcc\x9b\x91\x3d\xfb\xae\xbc\xa4\x40\xca\x80\x13\x93\xe7\x8c\xc7\xd1\x82\x7d\xbd\x9f\x37\x18\x03\x89\x0c\x98\xa2\x28\xba\xb6\x69\x9b\x5e\xe9\x33\xb0\x8d\x06\x68\x2e\xff\x73\x9a\x60\x8c\x41\x12\xad\x03\xbe\x22\xba\x0f\x25\x9d\x45\xe7\x51\xfa\x4e\xa7\x4a\x77\x17\x7e\xb7\x79\xf7\x96\x8d\x0a\x2c\x30\xaf\xe0\xc9\xc2\x49\xd8\x50\xef\x4e\x71\xdf\xe1\x85\x96\xf8\xbd\x2a\x1c\x47\x79\xfd\x27\xa9\x39\xc9\xf7\x9f\x14\xb3\x02\x09\x8c\xb2\xfd\xf9\x7b\x82\x29\xf3\x63\xc0\x8e\x8b\x8e\x4e\x68\xb3\x78\x72\x35\x0c\xca\x16\x25\xee\x9a\xea\x71\x76\x66\xba\x54\x38\x77\x58\x58\x84\xbe\x18\x9e\xcd\x74\xe9\x69\xb0\x8e\x5c\x7b\xef\xf0\x11\xa3\xd6\x0e\x7f\x03\x00\x00\xff\xff\x99\x19\x6f\x1d\x5a\x01\x00\x00")

func staticTemplatesStatsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticTemplatesStatsHtml,
		"static/templates/stats.html",
	)
}

func staticTemplatesStatsHtml() (*asset, error) {
	bytes, err := staticTemplatesStatsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/templates/stats.html", size: 346, mode: os.FileMode(420), modTime: time.Unix(1434998467, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/css/hyde.css": staticCssHydeCss,
	"static/css/poole.css": staticCssPooleCss,
	"static/css/syntax.css": staticCssSyntaxCss,
	"static/templates/_footer.html": staticTemplates_footerHtml,
	"static/templates/_header.html": staticTemplates_headerHtml,
	"static/templates/confirmation.html": staticTemplatesConfirmationHtml,
	"static/templates/error.html": staticTemplatesErrorHtml,
	"static/templates/index.html": staticTemplatesIndexHtml,
	"static/templates/stats.html": staticTemplatesStatsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"hyde.css": &bintree{staticCssHydeCss, map[string]*bintree{
			}},
			"poole.css": &bintree{staticCssPooleCss, map[string]*bintree{
			}},
			"syntax.css": &bintree{staticCssSyntaxCss, map[string]*bintree{
			}},
		}},
		"templates": &bintree{nil, map[string]*bintree{
			"_footer.html": &bintree{staticTemplates_footerHtml, map[string]*bintree{
			}},
			"_header.html": &bintree{staticTemplates_headerHtml, map[string]*bintree{
			}},
			"confirmation.html": &bintree{staticTemplatesConfirmationHtml, map[string]*bintree{
			}},
			"error.html": &bintree{staticTemplatesErrorHtml, map[string]*bintree{
			}},
			"index.html": &bintree{staticTemplatesIndexHtml, map[string]*bintree{
			}},
			"stats.html": &bintree{staticTemplatesStatsHtml, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

